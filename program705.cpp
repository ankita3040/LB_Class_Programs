/////////////////////////////////////////////////////////////////////////////////////////
//
// Header file inclusion
//
////////////////////////////////////////////////////////////////////////////////////////

#include<stdio.h>
#include<stdlib.h>
//#include<unistd.h>
#include<string.h>

#include<iostream>

using namespace std;


////////////////////////////////////////////////////////////////////////////////////////
//
// User defined Macros
//
////////////////////////////////////////////////////////////////////////////////////////


# define MAXSIZE 100

# define MAXINODE 5

# define READ 1
# define WRITE 2
# define EXECUTE 3

# define REGULARFILE 1
# define SPECIALFILE 2

# define START 0 
# define CURRENT 1
# define END 2

////////////////////////////////////////////////////////////////////////////////////////
//
// Structure name : BootBlock
// Description : Holds the information to boot the operating
//
////////////////////////////////////////////////////////////////////////////////////////
struct BootBlock
{
    char Information[100];

}bootobj;


/////////////////////////////////////////////////////////////////////////////////////////
//
// Structure name : SuperBlock
// Description : Holds the information of file system
//
////////////////////////////////////////////////////////////////////////////////////////


struct SuperBlock
{
    int TotalInodes;
    int FreeInodes;

};

/////////////////////////////////////////////////////////////////////////////////////////
//
// Structure name : Inode
// Description : Holds information about the file
//
////////////////////////////////////////////////////////////////////////////////////////

 typedef struct Inode
{
    char FileName[50];
    int iNodeNumber ;
    int FileSize;
    int ActualFileSize;
    int FileType;
    int ReferenceCount;
    int Permission;
    int LinkCount;
    char *Buffer;
    struct Inode *next;

}INODE, *PINODE, **PPINODE;

/////////////////////////////////////////////////////////////////////////////////////////
//
// Structure name : FileTable
// Description : Holds information about the opened file
//
////////////////////////////////////////////////////////////////////////////////////////

typedef struct FileTable
{
    int ReadOffset ;
    int WriteOffset;
    int Count;
    int Mode;
    PINODE ptrinode;
}FILETABLE,*PFILETABLE;


/////////////////////////////////////////////////////////////////////////////////////////
//
// Structure name : UAREA
// Description : Holds information about the process
//
////////////////////////////////////////////////////////////////////////////////////////

struct UAREA
{
    char ProcessName[50];
    PFILETABLE UFDT[MAXINODE];
};

/////////////////////////////////////////////////////////////////////////////////////////
//
//  Global variable or object used in project
//
////////////////////////////////////////////////////////////////////////////////////////

SuperBlock superobj;
PINODE head = NULL;
UAREA uareaobj;

//////////////////////////////////////////////////////////////////////////////////////////
//
// Entry point function of project(main)
//
//////////////////////////////////////////////////////////////////////////////////////////


int main()
{
    
    strcpy(bootobj.Information, "Boot block of operating system in done");

    cout<<bootobj.Information<<"\n";

    return 0;
}

